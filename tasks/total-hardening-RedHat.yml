# The most problematic part for most of the Linux admins. It will remove bash history.
- name: RHEL -> Disable storage of Bash history (kill bash_history)
  block:
    - name: RHEL -> Disable the storage of Bash History
      blockinfile:
        path: /etc/bashrc
        marker: "########## {mark} Disable the storage of Bash History ##########"
        backup: yes
        block: |
          export HISTFILESIZE=0
          unset HISTFILE
    - name: RHEL -> Add small notice related to bash history in /etc/profile for confused users
      lineinfile:
        path: /etc/profile
        state: present
        line: "### Bash history is deleted and disabled. Please check /etc/bashrc or /etc/bash.bashrc"
  when: disable_bash_history
  tags: BASH_HISTORY

- name: RHEL -> Ensure crond is enabled
  service:
    name: crond
    enabled: yes
    state: started
  tags: CRON

- name: RHEL -> Install common packages
  block:
    - name: RHEL -> Install some common packages
      yum:
        name:
          - authconfig
          - firewalld
        state: present
    - name: RHEL -> Install some common packages (EL7)
      yum:
        name:
          - yum-plugin-security
          - tcp_wrappers
          - libselinux-python
          - policycoreutils-python
        state: present
      when: ( ansible_os_family == 'RedHat' and ( ansible_distribution_major_version == '7' ))
    - name: RHEL -> Install some common packages (EL8/9)
      yum:
        name:
          - python3-policycoreutils
        state: present
      when: >
       ( ansible_os_family == 'RedHat' and ( ansible_distribution_major_version == '8' )) or
       ( ansible_os_family == 'RedHat' and ( ansible_distribution_major_version == '9' ))
  tags:
    - COMMON_PACKAGES
    - SSHD
    - TCP_WRAPPERS

# Disable some of the most problematic services if they exists
- name: RHEL -> Services
  block:
    - name: RHEL -> Disable rhnsd
      service:
        name: rhnsd
        enabled: no
        state: stopped
      failed_when: false
  tags: RHNSD

- name: RHEL -> Disable unused and dangerous filesystems
  block:
    - name: RHEL -> Disable unused filesystems
      copy:
        dest: "/etc/modprobe.d/stig-items.conf"
        mode: '0644'
        selevel: "s0"
        setype: "modules_conf_t"
        serole: "object_r"
        seuser: "system_u"
        content: |
          install cramfs /bin/true
          install freevxfs /bin/true
          install jffs2 /bin/true
          install hfs /bin/true
          install hfsplus /bin/true
          install squashfs /bin/true
          install udf /bin/true
          install vfat /bin/true
          options ipv6 disable=1
          install dccp /bin/true
          install sctp /bin/true
          install rds /bin/true
          install tipc /bin/true
  tags: UNUSED_FS

# If you use some yours repositories and you don't use gpgcheck, after this task - it will fail for use.
# All packages needs to be signed with related GPG signature, otherwise its not secure.
- name: RHEL -> Ensure yum GPG keys are configured
  block:
    - name: RHEL -> Set master yum.conf gpgcheck to '1'
      replace:
        dest: /etc/yum.conf
        regexp: '^gpgcheck\s*=\s*[^1]*$'
        replace: "gpgcheck = 1"
    - name: RHEL -> Find all repo files in /etc/yum.repos.d/
      find:
        paths: "/etc/yum.repos.d"
        patterns: "*.repo"
      register: yumrepos
    - name: RHEL -> Set all repos gpgchecks to '1'
      replace:
        dest: "{{ item.path }}"
        regexp: '^gpgcheck\s*=\s*[^1]*$'
        replace: gpgcheck = 1
      with_items: "{{ yumrepos.files }}"
  tags: GPG_KEYS

- name: RHEL -> Kernel Hardening
  block:
    - name: RHEL -> Set relevant kernel paramters
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        reload: yes
        state: present
        sysctl_set: yes
      loop:
        - { name: 'fs.suid_dumpable', value: '0' }
        - { name: 'kernel.core_uses_pid', value: '1' }
        - { name: 'kernel.ctrl-alt-del', value: '0' }
        - { name: 'kernel.dmesg_restrict', value: '1' }
        - { name: 'kernel.kptr_restrict', value: '2' }
        - { name: 'kernel.perf_event_paranoid', value: '3' }
        - { name: 'kernel.randomize_va_space', value: '2' }
        - { name: 'kernel.sysrq', value: '0' }
        - { name: 'net.ipv4.conf.all.accept_redirects', value: '0' }
        - { name: 'net.ipv4.conf.all.accept_source_route', value: '0' }
        - { name: 'net.ipv4.conf.all.bootp_relay', value: '0' }
        - { name: 'net.ipv4.conf.all.forwarding', value: '0' }
        - { name: 'net.ipv4.conf.all.log_martians', value: '1' }
        - { name: 'net.ipv4.conf.all.proxy_arp', value: '0' }
        - { name: 'net.ipv4.conf.all.send_redirects', value: '0' }
        - { name: 'net.ipv4.conf.default.accept_redirects', value: '0' }
        - { name: 'net.ipv4.conf.default.accept_source_route', value: '0' }
        - { name: 'net.ipv4.conf.default.log_martians', value: '1' }
        - { name: 'net.ipv4.icmp_echo_ignore_broadcasts', value: '1' }
        - { name: 'net.ipv4.icmp_ignore_bogus_error_responses', value: '1' }
        - { name: 'net.ipv4.tcp_syncookies', value: '1' }
        - { name: 'net.ipv4.tcp_timestamps', value: '1' }
        - { name: 'net.ipv6.conf.all.accept_redirects', value: '0' }
        - { name: 'net.ipv6.conf.all.accept_source_route', value: '0' }
        - { name: 'net.ipv6.conf.default.accept_redirects', value: '0' }
        - { name: 'net.ipv6.conf.default.accept_source_route', value: '0' }
    - name: RHEL -> Set relevant kernel parameters
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        reload: yes
        state: present
        sysctl_set: yes
      loop:
        - { name: 'fs.protected_hardlinks', value: '1' }
        - { name: 'fs.protected_symlinks', value: '1' }
        - { name: 'kernel.yama.ptrace_scope', value: '1' }
        - { name: 'net.core.bpf_jit_harden', value: '2' }
    - name: RHEL -> Set relevant kernel parameters (EL8/9)
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        reload: yes
        state: present
        sysctl_set: yes
      loop:
        - { name: 'fs.protected_fifos', value: '2' }
        - { name: 'fs.protected_regular', value: '2' }
      when: >
        ansible_os_family == 'RedHat' and
        (
          ansible_distribution_major_version|int == 8 or
          ansible_distribution_major_version|int == 9
        )
    - name: RHEL -> Setup kernel parameters on non-docker systems
      block:
        - name: RHEL -> Check is docker or podman installed
          shell: rpm -qa | grep "docker\|podman"
          args:
           warn: false
          register: docker
          failed_when: false
          changed_when: false
        - name: RHEL -> Setup kernel parameters on non-docker systems
          sysctl:
            name: "{{ item.name }}"
            value: "{{ item.value }}"
            reload: yes
            state: present
            sysctl_set: yes
          loop:
            - { name: 'net.ipv4.conf.all.rp_filter', value: '1' }
            - { name: 'net.ipv4.ip_forward', value: '0' }
          when: docker.stdout | length == 0
  tags: KERNEL_HARDENING

- name: RHEL -> Changes to LILO, EFI and GRUB
  block:
    - name: RHEL -> Check if the EFI directory exists
      find:
        paths: "/boot/efi/EFI"
        pattern: grub.cfg
        recurse: true
      register: efi_dir
    - debug: msg="{{ efi_dir.files[0].path }}"
      when: >
        efi_dir.files
    - name: RHEL -> Set variable for grub.cfg in EFI location
      set_fact:
        grub_cfg_path: "{{ efi_dir.files[0].path }}"
      when: efi_dir.files
    - name: RHEL -> Check if the LILO path exists
      stat:
        path: "/boot/grub2/grub.cfg"
      register: grub_dir
    - name: RHEL -> Set variable for grub.cfg in LILO location
      set_fact:
        grub_cfg_path: "{{ grub_dir.stat.path }}"
      when: grub_dir.stat.path is defined
    - name: RHEL -> Set chmod 600 on grub.cfg
      file:
        path: "{{ item }}"
        owner: root
        group: root
        mode: 0600
      loop:
        - "{{ grub_cfg_path }}"
        - /boot/grub2/grubenv
    - name: RHEL -> Ensure SELinux is not disabled in bootloader configuration
      replace:
        dest: /etc/default/grub
        regexp: "{{ item }}"
        replace: ""
      with_items:
        - selinux=0
        - enforcing=0
      when:
        - selinux is defined
        - selinux != "Disabled"
    - name: RHEL -> Find if IPv6 is currently in the grub file and disable it
      block:
        - name: RHEL -> Find if IPv6 is currently in the grub file, shows changed when it is in the file
          lineinfile:
            path: /etc/default/grub
            regexp: '^\s*GRUB_CMDLINE_LINUX.*ipv6.disable=1'
            state: absent
          check_mode: yes
          changed_when: false
          register: ipv6_disable_grub
          failed_when: false
        - name: RHEL -> Disable IPv6 in grub
          replace:
            path: /etc/default/grub
            regexp: '^GRUB_CMDLINE_LINUX="'
            replace: 'GRUB_CMDLINE_LINUX="ipv6.disable=1 '
          when: ipv6_disable_grub.changed
        - name: RHEL -> Rebuild grub
          command: /usr/sbin/grub2-mkconfig -o /boot/grub2/grub.cfg
          when: ipv6_disable_grub.changed
  tags: GRUB

- name: RHEL -> Disable display manager if graphical desktop not needed
  block:
    - name: RHEL -> Get default runlevel
      stat:
        path: /etc/systemd/system/default.target
      register: default_runlevel_out
    - name: RHEL -> Disable the gdm display manager if system is not in graphical.target
      systemd:
        name: gdm
        enabled: no
        masked: yes
        state: stopped
        daemon-reload: yes
      when: default_runlevel_out.stat.lnk_target is search("graphical.target")
    - name: RHEL -> Set current runlevel to multi-user.target
      command: /usr/bin/systemctl isolate multi-user.target
      when: default_runlevel_out.stat.lnk_target is search("graphical.target")
    - name: RHEL -> Det default runlevel to multi-user.target
      file:
        src: /lib/systemd/system/multi-user.target
        dest: /etc/systemd/system/default.target
        owner: root
        group: root
      when: default_runlevel_out.stat.lnk_target is search("graphical.target")
  tags: DM

- name: RHEL -> Disable nfs-server if it's not used
  block:
    - name: RHEL -> Check is there some content in /etc/exports
      shell: |
        grep -v "^[[:space:]]*#\|^[[:space:]]*$" /etc/exports
      register: exports_content
      failed_when: false
      changed_when: false
    - name: RHEL -> Stop and disable NFS service
      service:
        name: nfs-server
        state: stopped
        enabled: no
      failed_when: false
      when: ( exports_content.stdout | length == 0 )
  tags: NFS

# Require tcp_wrappers installed
- name: RHEL -> TCP Wrappers (EL7)
  block:
    - name: RHEL -> Create basic hosts.allow
      lineinfile:
        dest: /etc/hosts.allow
        owner: root
        group: root
        mode: 0644
        line: "ALL: 127.0.0.1"
    - name: RHEL -> Set permissions on tcp wrappers files (EL7)
      file:
        path: "{{ item }}"
        owner: root
        group: root
        mode: 0644
      loop:
        - /etc/hosts.allow
        - /etc/hosts.deny
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version|int == 7
  tags: TCP_WRAPPERS

- name: RHEL -> Configure PAM files and password requirements
  block:
    - name: RHEL -> Setup /etc/security/pwquality.conf
      copy:
        dest: "/etc/security/pwquality.conf"
        mode: '0644'
        content: |
          difok = 5
          minlen = 8
          dcredit = -1
          ucredit = -1
          lcredit = -1
          ocredit = -1
          minclass = 4
          maxrepeat = 3
          maxclassrepeat = 0
    - name: RHEL -> Configure PAM files and password requirements (system-auth)
      copy:
        dest: /etc/pam.d/system-auth
        mode: "0644"
        content: |
           #%PAM-1.0
           # Default rules plus some specific hardening
           # User changes will be destroyed the next time authconfig is run.
           auth        required      pam_env.so
           auth        required      pam_faillock.so preauth silent audit deny=5 unlock_time=900
           auth        sufficient    pam_unix.so try_first_pass
           auth        [default=die] pam_faillock.so authfail audit deny=5 unlock_time=900
           auth        sufficient    pam_faillock.so authsucc audit deny=5 unlock_time=900
           auth        requisite     pam_succeed_if.so uid >= 1000 quiet_success
           auth        required      pam_deny.so
           account     required      pam_unix.so
           account     sufficient    pam_localuser.so
           account     sufficient    pam_succeed_if.so uid < 1000 quiet
           account     required      pam_permit.so
           account     required      pam_faillock.so
           # Password Quality now set in /etc/security/pwquality.conf
           password    required      pam_pwquality.so try_first_pass local_users_only retry=5 authtok_type=
           password    requisite     pam_pwhistory.so remember=5 use_authtok
           password    sufficient    pam_unix.so sha512 shadow try_first_pass use_authtok
           password    required      pam_deny.so
           session     optional      pam_keyinit.so revoke
           session     required      pam_limits.so
           -session     optional     pam_systemd.so
           session     [success=1 default=ignore] pam_succeed_if.so service in crond quiet use_uid
           session     required      pam_unix.so
    - name: RHEL -> Configure PAM files and password requirements (password-auth)
      copy:
        mode: "0644"
        dest: /etc/pam.d/password-auth
        content: |
           #%PAM-1.0
           # Default rules plus some specific hardening
           # User changes will be destroyed the next time authconfig is run.
           auth        required      pam_env.so
           auth        required      pam_faillock.so preauth silent audit deny=5 unlock_time=900
           auth        sufficient    pam_unix.so try_first_pass
           auth        [default=die] pam_faillock.so authfail audit deny=5 unlock_time=900
           auth        sufficient    pam_faillock.so authsucc audit deny=5 unlock_time=900
           auth        requisite     pam_succeed_if.so uid >= 1000 quiet_success
           auth        required      pam_deny.so
           account     required      pam_unix.so
           account     sufficient    pam_localuser.so
           account     sufficient    pam_succeed_if.so uid < 1000 quiet
           account     required      pam_permit.so
           account     required      pam_faillock.so
           # Password Quality now set in /etc/security/pwquality.conf
           password    required      pam_pwquality.so try_first_pass local_users_only retry=5 authtok_type=
           password    requisite     pam_pwhistory.so remember=5 use_authtok
           password    sufficient    pam_unix.so sha512 shadow try_first_pass use_authtok
           password    required      pam_deny.so
           session     optional      pam_keyinit.so revoke
           session     required      pam_limits.so
           -session     optional     pam_systemd.so
           session     [success=1 default=ignore] pam_succeed_if.so service in crond quiet use_uid
           session     required      pam_unix.so
  tags: PAM

- name: RHEL -> Umasks and login.defs setup
  block:
    - name: RHEL -> Lock default services accounts. Needs to be done before setup login.defs
      block:
        - name: RHEL -> Get system users for which password will be changed to random UID>0 and <UID_MIN
          shell: |
            SYS_UID_MIN="$(awk '/^UID_MIN/ {print $2}' /etc/login.defs)"
            awk -v a="${SYS_UID_MIN}" -F:   '$3<a {print $1}' /etc/passwd | grep -v "root" | xargs
          register: sys_users
          changed_when: false
        - name: RHEL -> Report for which users password will be locked
          debug: msg="{{ sys_users.stdout }}"
          when: sys_users.stdout | length > 0
          changed_when: true
        - name: RHEL -> Lock to all fetched system users
          shell: |
            for i in {{ sys_users.stdout }} ; do
              echo "passwd -l ${i}" >> /tmp/provera1
              passwd -l ${i}
            done
        - name: RHEL -> Get all system users (UID>0 and <UID_MIN) except shutdown with access to shell
          shell: |
            SYS_UID_MIN="$(awk '/^UID_MIN/ {print $2}' /etc/login.defs)"
            cat /etc/passwd | grep -v "nologin$\|false$\|^root\|sync\|shutdown\|halt" | awk -v a="${SYS_UID_MIN}" -F: '$3<$a {print $1}'
          register: sys_wo_nologin
          failed_when: false
          changed_when: false
        - name: RHEL -> Report to user account for which we will set shell to /bin/false
          debug: msg="Shell will be removed for --> {{ sys_wo_nologin.stdout }}"
          when: sys_wo_nologin.stdout | length > 0
        - name: RHEL -> Set /bin/false as a default shell for fetched system users
          shell: |
            for i in {{ sys_wo_nologin.stdout }} ; do
              echo "chsh -s /bin/false ${i}" >> /tmp/provera2
              chsh -s /bin/false ${i}
            done
          when: sys_wo_nologin.stdout | length > 0
        - name: RHEL -> Report to user account there is no sys-account without /bin/false
          debug: msg="None of system users have access to shell"
          when: sys_wo_nologin.stdout | length == 0
        - name: RHEL -> Setup login.defs file
          copy:
            dest: "/etc/login.defs"
            mode: '0644'
            content: |
               MAIL_DIR        /var/spool/mail
               PASS_MIN_LEN    5
               PASS_WARN_AGE   7
               UID_MIN         1000
               UID_MAX         60000
               SYS_UID_MIN     201
               SYS_UID_MAX     999
               GID_MIN         1000
               GID_MAX         60000
               SYS_GID_MIN     201
               SYS_GID_MAX     999
               CREATE_HOME     yes
               UMASK           077
               USERGROUPS_ENAB yes
               ENCRYPT_METHOD  SHA512
               PASS_MIN_DAYS   7
               PASS_MAX_DAYS   180
               FAIL_DELAY      4
               SHA_CRYPT_MIN_ROUNDS 6000
               SHA_CRYPT_MAX_ROUNDS 10000
               FAILLOG_ENAB    yes
  tags: UMASK_LOGIN_DEFS

- name: RHEL -> The system must not have accounts configured with blank or null passwords (EL7)
  replace:
    path: /etc/pam.d/system-auth-ac
    regexp: ' nullok'
    replace: ''
    backup: yes
  failed_when: false
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version|int == 7
  tags: NULL_PASSWORD

- name: RHEL -> The operating system must disable account identifiers (individuals, groups, roles, and devices) if the password expires.
  block:
    - name: RHEL -> Setup INACTIVE=30 in /etc/default/useradd
      lineinfile:
        path: /etc/default/useradd
        regexp: '(.*)INACTIVE(.*)(?!30)'
        line: INACTIVE=30
    - name: RHEL -> Find users with hashed password and setup their inactivity period to 30 days
      shell: |
        egrep ^[^:]+:[^\!*] /etc/shadow | grep -v "root"  | awk -F":" '$7 != 30 {print $1}' | xargs
      register: inactive_users_set
      changed_when: false
    - name: RHEL -> Report to user accounts for which we will set inactivity period
      debug: msg="{{ inactive_users_set.stdout_lines }}"
      when: inactive_users_set.stdout | length > 0
      changed_when: true
    - name: RHEL -> Change their password inactivity period to 30 days
      shell: |
        for i in {{ inactive_users_set.stdout }} ; do
          chage --inactive 30 ${i}
        done
      when: inactive_users_set.stdout | length > 0
  tags: INACTIVE

- name: RHEL -> Workaround for permissions reset after boot for boot.log and dmesg (EL7)
  cron:
    name: "Permissions workaround for the files boot.log and dmesg"
    special_time: "reboot"
    state: present
    job: "chmod 640 /var/log/boot.log /var/log/dmesg 2>/dev/null"
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version|int == 7
  tags: AUDIT_LOG_FILES

- name: RHEL -> Ensure core limits are set and dumps are disabled
  block:
    - name: RHEL -> Ensure core soft limits are set
      pam_limits:
        dest: /etc/security/limits.conf
        domain: "*"
        limit_type: hard
        limit_item: maxlogins
        value: "10"
    - name: RHEL -> Ensure core dumps are restricted fs.suid_dumpable=0
      sysctl:
        name: fs.suid_dumpable
        value: "0"
        state: present
        reload: yes
    - name: RHEL -> Ensure hard limit unlimited is disabled
      lineinfile:
        dest: /etc/security/limits.conf
        state: absent
        regexp: "^[*].*hard.*core.*unlimited.*"
    - name: RHEL -> Ensure soft limit unlimited is disabled
      lineinfile:
        path: /etc/security/limits.conf
        regexp: "^[*].*soft.*core.*unlimited.*"
        state: absent
        backup: yes
    - name: RHEL -> Ensure core hard limits are set
      pam_limits:
        dest: /etc/security/limits.conf
        domain: "*"
        limit_type: hard
        limit_item: core
        value: "0"
    - name: RHEL -> Ensure core soft limits are set
      pam_limits:
        dest: /etc/security/limits.conf
        domain: "*"
        limit_type: soft
        limit_item: core
        value: "0"
    - name: RHEL -> Disable core dumps in /etc/profile
      lineinfile:
        dest: /etc/profile
        regexp: "^ulimit.*-c.*!0"
        line: "ulimit -c 0"
    - name: RHEL -> Disable core dumps in /etc/systemd/coredump.conf
      lineinfile:
        dest: /etc/systemd/coredump.conf
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      with_items:
        - { regexp: '.*ProcessSizeMax=.*', line: 'ProcessSizeMax=0' }
        - { regexp: '.*Storage=.*', line: 'Storage=none' }
  tags: CORE_DUMPS_AND_LIMITS

# Bug detected while changing SSH port, will work on this. Require libselinux-python, policycoreutils-python, python3-policycoreutils
- name: RHEL -> Change default SSH port if asked
  block:
    - name: RHEL -> SSHD port changing
      block:
        - name: RHEL -> Allow for Selinux to allow sshd to listen on tcp port {{ ssh_port }}
          seport:
            ports: '{{ ssh_port }}'
            proto: tcp
            setype: ssh_port_t
            state: present
          when: ssh_port != 22
        - name: RHEL -> Allow port {{ ssh_port }} for firewalld
          firewalld:
            port: '{{ ssh_port }}/tcp'
            permanent: yes
            immediate: yes
            state: enabled
          when: ssh_port != 22
    - name: RHEL -> Harden sshd_config from the template
      template:
        src: "files/sshd/sshd_config-{{ ansible_os_family }}{{ ansible_distribution_major_version }}.template"
        dest: /etc/ssh/sshd_config
        owner: root
        group: root
        backup: yes
        mode: 0600
      register: sshd_change
    - name: RHEL -> Restart service sshd
      service:
        name: sshd
        state: restarted
      when: sshd_change.changed
      failed_when: false
    - name: RHEL -> Setup ansible_port to {{ ssh_port }}
      set_fact:
        ansible_ssh_port: "{{ ssh_port }}"
      when: ssh_port != 22
  tags: SSHD

- name: RHEL -> Lynis recommendations
  block:
   - name: RHEL -> Firewire driver disabled
     copy:
       dest: "/etc/modprobe.d/blacklist-firewire.conf"
       mode: '0644'
       content: |
          blacklist firewire-ohci
          blacklist firewire-sbp2
   - name: RHEL -> CHMOD 0600 --> cron.deny
     file:
       path: /etc/cron.deny
       owner: root
       group: root
       mode: 0600
   - name: RHEL -> CHMOD 0600 --> at.deny
     file:
       path: /etc/at.deny
       owner: root
       group: root
       mode: 0600
     failed_when: false
   - name: RHEL -> Install psacct and usbguard
     yum:
       name: '{{ item }}'
       state: present
     loop:
       - psacct
       - usbguard
     failed_when: false
   - name: RHEL -> Service psacct to be running
     service:
       name: psacct
       state: started
       enabled: yes
   - name: RHEL -> Ensure that  systemd-resolved is installed (RH9)
     yum:
       name: systemd-resolved
       state: present
     when:
       - ansible_os_family == 'RedHat'
       - ansible_distribution_major_version|int == 9
   - name: RHEL -> DNSSEC supported (systemd-resolved) Lynis check (EL8/9)
     service:
       name: systemd-resolved
       state: started
       enabled: yes
     when: >
       ansible_os_family == 'RedHat' and
       (
         ansible_distribution_major_version|int == 8 or
         ansible_distribution_major_version|int == 9
       )
   - name: RHEL -> CHMOD 700 --> /usr/bin/as
     file:
       dest: /usr/bin/as
       mode: "0700"
       owner: root
       group: root
     failed_when: false
   - name: RHEL -> Set umask rules to /etc/init.d/functions, /etc/{bashrc,csh.cshrc,profile}
     replace:
       dest: "{{ item }}"
       regexp: 'umask*.[0-9][0-9][0-9]'
       replace: "umask 027"
     loop:
       - /etc/init.d/functions
       - /etc/bashrc
       - /etc/csh.cshrc
       - /etc/profile
       - /etc/bash.bashrc
     failed_when: false
   - name: RHEL -> Add notice about umask to /etc/profile
     lineinfile:
       path: /etc/profile
       line: "### HARDENING: UMASK is also configured in /etc/init.d/functions, /etc/{bashrc,csh.cshrc,profile} "
       regexp: '^### HARDENING: UMASK (.*)'
   - name: RHEL -> Ensure Presence of configured hostname in /etc/hosts
     lineinfile:
       path: /etc/hosts
       line: "{{ ansible_default_ipv4.address|default(ansible_all_ipv4_addresses[0]) }}   {{ ansible_fqdn }} {{ ansible_hostname }}"
       regexp: "{{ ansible_default_ipv4.address|default(ansible_all_ipv4_addresses[0]) }}.*"
       state: present
       backup: yes
   - name: RHEL -> Disable default USB devices authorization for systemd systems
     block:
       - name: RHEL -> Create script for USB devices authorization
         copy:
           dest: "/usr/local/bin/USB-authorization"
           mode: '0750'
           content: |
             #!/bin/sh
             # Disable default USB devices authorization
             if [[ $(ls -l /sys/bus/usb/devices/usb*/authorized* 2>/dev/null | wc -l ) -gt 0 ]] ; then
               for USB in $(ls /sys/bus/usb/devices/usb*/authorized*) ; do
                 echo 0 > "$USB"
               done
             fi
       - name: RHEL -> Create systemd for USB devices authorization
         copy:
           dest: "/etc/systemd/system/USB-authorization.service"
           mode: '0644'
           content: |
             [Unit]
             Description=Disable default USB devices authorization. Hardening step.

             [Service]
             Type=simple
             ExecStart=/bin/bash /usr/local/bin/USB-authorization

             [Install]
             WantedBy=multi-user.target
         register: usb_auth
       - name: RHEL -> Reload systemd daemon, enable and restart USB-authorization.service
         systemd:
           name: USB-authorization.service
           state: restarted
           enabled: yes
           daemon_reload: yes
         when: usb_auth.changed
  tags: LYNIS_RECOMMENDATIONS

# Require firewalld
- name: RHEL -> Firewall setup - only ping and SSH will be allowed
  block:
    - name: RHEL -> Disable iptables and nftables
      service:
        name: '{{ item }}'
        state: stopped
        enabled: no
        masked: yes
      ignore_errors: true
      failed_when: false
      loop:
        - iptables
        - nftables
    - name: RHEL -> Add port {{ ssh_port }} to firewalld SSH service
      lineinfile:
        path: "/usr/lib/firewalld/services/ssh.xml"
        line: '  <port protocol="tcp" port="{{ ssh_port }}"/> '
        insertbefore: '</service>'
      when: ssh_port != 22
    - name: RHEL -> Start and enable firewalld
      service:
        name: firewalld
        state: started
        enabled: yes
  tags: FIREWALL

- name: RHEL -> Install AIDE
  block:
    - name: RHEL -> Install aide packages
      package:
        name: aide
        state: present
      register: aide_install
    - name: RHEL -> Remove log file for AIDE (we will use stdout and redirection to file instead)
      lineinfile:
        dest: /etc/aide.conf
        state: absent
        regexp: "^report_url=file(.*)"
    - name: RHEL -> Setup path for AIDE database_out file
      lineinfile:
        dest: /etc/aide.conf
        line: database_out=file:/var/lib/aide/aide.db.new.gz
        regexp: "^database_out=.*"
    - name: RHEL -> Setup path for AIDE database file
      lineinfile:
        dest: /etc/aide.conf
        line: database=file:/var/lib/aide/aide.db.gz
        regexp: "^database=.*"
    - name: RHEL -> Logrotate rule for AIDE
      copy:
        dest: "/etc/logrotate.d/aide"
        mode: "0644"
        content: |
          /var/log/aide/aide.log {
            monthly
            maxsize 300M
            missingok
            rotate 12
            compress
            dateext
            notifempty
            copytruncate
          }
    - name: RHEL -> Create AIDE script which will be used for crontab
      copy:
        dest: "/usr/local/sbin/aide.sh"
        mode: "0700"
        owner: root
        group: root
        content: |
          #!/bin/bash
          mkdir -p /var/log/aide/
          if [ ! -f /var/lib/aide/aide.db.gz ]; then
            nice -n19 /usr/sbin/aide --init
            mv -f /var/lib/aide/aide.db.new.gz /var/lib/aide/aide.db.gz
          else
            nice -n19 /usr/sbin/aide --check 1>>/var/log/aide/aide.log
            nice -n19 /usr/sbin/aide --update
            rm -f /var/lib/aide/aide.db.gz
            mv /var/lib/aide/aide.db.new.gz /var/lib/aide/aide.db.gz
          fi
    - name: RHEL -> Create a cron entry for AIDE (daily check and 04:50)
      cron:
        name: AIDE checks (hardening)
        minute: "50"
        hour: "04"
        user: root
        job: "/usr/local/sbin/aide.sh &>/dev/null"
        state: present
    - name: RHEL -> Check if the Aide db exists (if exists init will be skipped)
      stat:
        path: "/var/lib/aide/aide.db.gz"
      register: aidedb
  when: install_aide
  tags: AIDE

# Basically, this is not needed, but is OK to check audit score, from time to time
# You can remove this from server with: rm -rf /root/lynis
- name: RHEL -> Copy Lynis setup to server
  block:
    - name: RHEL -> Extract lynis.tar.gz into /usr/local/
      unarchive:
        src: files/Lynis/lynis.tar.gz
        dest: /usr/local/
      tags: LYNIS_INSTALL
    - name: RHEL -> Check Lynis audit score
      block:
        - name: RHEL -> Run Lynis audit scan
          shell: |
            cd /usr/local/lynis
            ./lynis audit system
        - name: RHEL -> Check Lynis audit score
          shell: grep 'Hardening index' /var/log/lynis.log | cut -d " " -f 3- | grep -o '[[:digit:]]*'
          register: audit_score
        - name: RHEL -> Show audit score and info (less than 85/100 is compliance fail)
          debug: msg='Hardening index --> {{ audit_score.stdout }}/100'
          failed_when: audit_score.stdout|int < 85
          ignore_errors: true
      tags: LYNIS_SCAN
  tags: LYNIS

- name: RHEL -> Check will server survive the reboot, just for any case
  reboot:
  when: reboot_is_approved
  tags: REBOOT